name: Scorecard JSON Generator

on:
  schedule:
    - cron: '0 2 * * 1'
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  security-events: read  # Required for CodeQL SARIF
  actions: read

jobs:
  scorecard-json:
    name: Generate JSON Scorecard
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Git and Pull Latest
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main
          
      - name: Create .backstage directory
        run: mkdir -p .backstage

      - name: Run Scorecard in JSON format
        uses: ossf/scorecard-action@v2.4.1
        with:
          results_file: .backstage/scorecard.json
          results_format: json
          publish_results: false
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Fetch Security Alerts (Dependabot, Secret Scanning, CodeQL)
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO="${{ github.repository }}"

          echo "Fetching Dependabot Alerts..."
          DEP_ALERTS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/dependabot/alerts?per_page=100")

          if echo "$DEP_ALERTS" | jq -e 'type == "array"' > /dev/null; then
            DEP_COUNT=$(echo "$DEP_ALERTS" | jq '[.[] | select(.state=="open")] | length')
          else
            echo "Dependabot not configured or not accessible. Defaulting to 0."
            DEP_COUNT=0
          fi

          echo "Fetching Secret Scanning Alerts..."
          SECRET_ALERTS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/secret-scanning/alerts?per_page=100")

          if echo "$SECRET_ALERTS" | jq -e 'type == "array"' > /dev/null; then
            SECRET_COUNT=$(echo "$SECRET_ALERTS" | jq '[.[] | select(.state=="open")] | length')
          else
            echo "⚠️ Secret Scanning not configured or not accessible. Defaulting to 0."
            SECRET_COUNT=0
          fi

          echo "Fetching CodeQL Alerts..."
          CODEQL_ALERTS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/code-scanning/alerts?per_page=100")

          if echo "$CODEQL_ALERTS" | jq -e 'type == "array"' > /dev/null; then
            CODEQL_COUNT=$(echo "$CODEQL_ALERTS" | jq '[.[] | select(.state=="open")] | length')
          else
            echo "CodeQL not configured or not accessible. Defaulting to 0."
            CODEQL_COUNT=0
          fi

          [ -f .backstage/scorecard.json ] || echo '{}' > .backstage/scorecard.json

          jq --argjson dependabot "$DEP_COUNT" \
             --argjson secret "$SECRET_COUNT" \
             --argjson codeql "$CODEQL_COUNT" \
            '.dependabot_alerts = $dependabot |
             .secret_scanning_alerts = $secret |
             .codeql_alerts = $codeql' \
            .backstage/scorecard.json > .backstage/tmp && mv .backstage/tmp .backstage/scorecard.json

      - name: Rename "score" to "default_ossf_score"
        run: |
          jq '.
            | .default_ossf_score = .score
            | del(.score)
          ' .backstage/scorecard.json > .backstage/tmp && mv .backstage/tmp .backstage/scorecard.json  

      - name: Compute and inject security_score with custom and default OSSF scores
        run: |
          # Compute custom OSSF score from selected checks
          CUSTOM_SCORE=$(jq '
              (
                [.checks[] |
                  select(.name == "Vulnerabilities" or
                         .name == "Security-Policy" or
                         .name == "SAST" or
                         .name == "CI-Tests" or
                         .name == "Dependency-Update-Tool")
                | .score] as $scores
                | if ($scores | length) == 0
                  then 0
                  else ($scores | add / ($scores | length))
                end
              )
            ' .backstage/scorecard.json)

          echo "🔎 custom_ossf_score = $CUSTOM_SCORE"

          jq --arg score "$CUSTOM_SCORE" '.custom_ossf_score = ($score | tonumber)' .backstage/scorecard.json > .backstage/tmp && mv .backstage/tmp .backstage/scorecard.json

          # Read default OSSF score
          DEFAULT_SCORE=$(jq '.default_ossf_score // 0' .backstage/scorecard.json)
          echo "📌 default_ossf_score = $DEFAULT_SCORE"

          # Read alert counts
          DEP_ALERTS=$(jq '.dependabot_alerts // 0' .backstage/scorecard.json)
          SEC_ALERTS=$(jq '.secret_scanning_alerts // 0' .backstage/scorecard.json)
          CODEQL_ALERTS=$(jq '.codeql_alerts // 0' .backstage/scorecard.json)

          # Calculate penalties (0.1 per alert)
          PENALTIES=$(awk -v d="$DEP_ALERTS" -v s="$SEC_ALERTS" -v c="$CODEQL_ALERTS" 'BEGIN { print (d + s + c) * 0.1 }')
          RAW_SCORE=$(awk -v base="$DEFAULT_SCORE" -v pen="$PENALTIES" 'BEGIN { print base - pen }')
          FINAL_SCORE=$(awk -v s="$RAW_SCORE" 'BEGIN { if (s<0) print 0; else if (s>10) print 10; else printf "%.1f", s }')

          echo "security_score = $FINAL_SCORE"

          jq --arg score "$FINAL_SCORE" '.security_score = ($score | tonumber)' .backstage/scorecard.json > .backstage/tmp && mv .backstage/tmp .backstage/scorecard.json

      - name: Commit scorecard.json
        run: |
          git add .backstage/scorecard.json
          git commit -m "Update scorecard with secret scan, CodeQL, and final security score" || echo "No changes"
          git push origin main
