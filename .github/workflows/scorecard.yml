name: Scorecard JSON Generator

on:
  schedule:
    - cron: '0 2 * * 1'
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scorecard-json:
    name: Generate JSON Scorecard
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Git and Pull Latest
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin main
          
      - name: Create .backstage directory
        run: mkdir -p .backstage

      - name: Run Scorecard in JSON format
        uses: ossf/scorecard-action@v2.4.1
        with:
          results_file: .backstage/scorecard.json
          results_format: json
          publish_results: false

      - name: Fetch Dependabot alert count and update scorecard.json
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          REPO="${{ github.repository }}"
          ALERTS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPO}/dependabot/alerts?per_page=100")

          # Check if response is an array (starts with [)
          if echo "$ALERTS" | jq -e 'type=="array"' >/dev/null; then
            COUNT=$(echo "$ALERTS" | jq '[.[] | select(.state=="open")] | length')
          else
            echo "⚠️ Failed to fetch Dependabot alerts properly. Response was:"
            echo "$ALERTS"
            COUNT=0
          fi

          echo "Found $COUNT open Dependabot alerts"

          if [ ! -f .backstage/scorecard.json ]; then
            echo '{}' > .backstage/scorecard.json
          fi

          jq --argjson count "$COUNT" '.dependabot_alerts = $count' .backstage/scorecard.json > .backstage/tmp.json && mv .backstage/tmp.json .backstage/scorecard.json

      - name: Compute and inject security_score
        run: |
          ALERT_COUNT=$(jq '.dependabot_alerts' .backstage/scorecard.json)

          if [ "$ALERT_COUNT" -eq 0 ]; then
            PENALTY=0
          elif [ "$ALERT_COUNT" -le 5 ]; then
            PENALTY=1
          elif [ "$ALERT_COUNT" -le 10 ]; then
            PENALTY=2
          else
            PENALTY=3
          fi

          SCORE_AVG=$(jq '[.checks[] | select(.name=="Vulnerabilities" or .name=="Token-Permissions" or .name=="Branch-Protection") | .score] | add / length' .backstage/scorecard.json)
          if [ "$SCORE_AVG" = "null" ]; then SCORE_AVG=5; fi

          FINAL_SCORE=$(echo "$SCORE_AVG - $PENALTY" | bc -l)
          CLAMPED_SCORE=$(awk -v s="$FINAL_SCORE" 'BEGIN { if (s<0) print 0; else if (s>10) print 10; else printf "%.1f", s }')

          jq --arg score "$CLAMPED_SCORE" '.security_score = ($score | tonumber)' .backstage/scorecard.json > .backstage/tmp.json && mv .backstage/tmp.json .backstage/scorecard.json

      - name: Commit scorecard.json to repo
        run: |
          git add .backstage/scorecard.json
          git commit -m "Update OpenSSF scorecard with dependabot and security_score [ci skip]" || echo "No changes to commit"
          git push origin main
